{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/create-company/create-company.component.html","webpack:///./src/app/admin/create-company/create-company.component.ts","webpack:///./src/app/admin/create-coupon/create-coupon.component.html","webpack:///./src/app/admin/create-coupon/create-coupon.component.ts","webpack:///./src/app/admin/create-customer/create-customer.component.html","webpack:///./src/app/admin/create-customer/create-customer.component.ts","webpack:///./src/app/admin/get-companies/get-companies.component.html","webpack:///./src/app/admin/get-companies/get-companies.component.ts","webpack:///./src/app/admin/get-coupons/get-coupons.component.html","webpack:///./src/app/admin/get-coupons/get-coupons.component.ts","webpack:///./src/app/admin/get-customers/get-customers.component.html","webpack:///./src/app/admin/get-customers/get-customers.component.ts","webpack:///./src/app/admin/get-incomes/get-incomes.component.html","webpack:///./src/app/admin/get-incomes/get-incomes.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/company/create-company-coupon/create-company-coupon.component.html","webpack:///./src/app/company/create-company-coupon/create-company-coupon.component.ts","webpack:///./src/app/company/get-company-coupons/get-company-coupons.component.html","webpack:///./src/app/company/get-company-coupons/get-company-coupons.component.ts","webpack:///./src/app/customer/get-customer-coupons/get-customer-coupons.component.html","webpack:///./src/app/customer/get-customer-coupons/get-customer-coupons.component.ts","webpack:///./src/app/customer/purchase-coupon/purchase-coupon.component.html","webpack:///./src/app/customer/purchase-coupon/purchase-coupon.component.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/models/errorStateMatcher.ts","webpack:///./src/app/registration/registration.component.html","webpack:///./src/app/registration/registration.component.ts","webpack:///./src/app/shared/guards/admin-auth.guard.ts","webpack:///./src/app/shared/guards/company-auth.guard.ts","webpack:///./src/app/shared/guards/customer-auth.guard.ts","webpack:///./src/app/shared/layouts/admin/admin.component.css","webpack:///./src/app/shared/layouts/admin/admin.component.html","webpack:///./src/app/shared/layouts/admin/admin.component.ts","webpack:///./src/app/shared/layouts/authorisation/authorisation.component.css","webpack:///./src/app/shared/layouts/authorisation/authorisation.component.html","webpack:///./src/app/shared/layouts/authorisation/authorisation.component.ts","webpack:///./src/app/shared/layouts/company/company.component.css","webpack:///./src/app/shared/layouts/company/company.component.html","webpack:///./src/app/shared/layouts/company/company.component.ts","webpack:///./src/app/shared/layouts/customer/customer.component.css","webpack:///./src/app/shared/layouts/customer/customer.component.html","webpack:///./src/app/shared/layouts/customer/customer.component.ts","webpack:///./src/app/shared/page404/page404.component.html","webpack:///./src/app/shared/page404/page404.component.ts","webpack:///./src/app/shared/services/admin.service.ts","webpack:///./src/app/shared/services/authorisation.service.ts","webpack:///./src/app/shared/services/company.service.ts","webpack:///./src/app/shared/services/customer.service.ts","webpack:///./src/app/shared/services/error.service.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<form class=\\\"example-form div2 animated bounceInRight\\\"\\n      (ngSubmit)=\\\"onSubmit()\\\"\\n>\\n  <mat-form-field class=\\\"example-full-width\\\" class=\\\"mf-f\\\">\\n    <input matInput\\n           placeholder=\\\"Company name\\\"\\n           [formControl]=\\\"form.get('name')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('name').hasError('minlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid name (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('maxlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid name (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('required')\\\">\\n      Name is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Email\\\"\\n           [formControl]=\\\"form.get('email')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('email').hasError('email') && !form.get('email').hasError('required')\\\">\\n      Please enter a valid email address\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('email').hasError('maxlength') && !form.get('email').hasError('required')\\\">\\n      Please enter a valid email (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('email').hasError('required')\\\">\\n      Email is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"password\\\"\\n           placeholder=\\\"Password\\\"\\n           [formControl]=\\\"form.get('password')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('password').hasError('minlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('maxlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('required')\\\">\\n      Password is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Add</button>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AdminService} from '../../shared/services/admin.service';\nimport {MatSnackBar} from '@angular/material';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\n\n@Component({\n  selector: 'app-create-company',\n  templateUrl: './create-company.component.html',\n  styleUrls: ['../../../app/shared/layouts/admin/admin.component.css']\n})\nexport class CreateCompanyComponent implements OnInit {\n\n  form: FormGroup;\n\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private admin: AdminService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.email,\n        Validators.maxLength(20)\n      ]),\n\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ])\n\n    });\n  }\n\n  onSubmit() {\n    this.admin.createCompany(this.form.value).subscribe(\n      () => this.snackBar.open('New company successfully added.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n}\n","module.exports = \"<form class=\\\"example-form div2 animated bounceInRight\\\"\\n      (ngSubmit)=\\\"onSubmit()\\\"\\n>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Title\\\"\\n           [formControl]=\\\"form.get('title')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('title').hasError('minlength') && !form.get('title').hasError('required')\\\">\\n      Please enter a valid title (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('title').hasError('maxlength') && !form.get('title').hasError('required')\\\">\\n      Please enter a valid title (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('title').hasError('required')\\\">\\n      Title is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field style=\\\"width: 50%\\\" color=\\\"accent\\\">\\n    <mat-label>Start date</mat-label>\\n    <input matInput\\n           type=\\\"date\\\"\\n           [matDatepicker]=\\\"startDate\\\"\\n           [formControl]=\\\"form.get('startDate')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('startDate').hasError('required')\\\">\\n      Start date is <strong>required</strong>\\n    </mat-error>\\n    <mat-datepicker-toggle matSuffix [for]=\\\"startDate\\\"></mat-datepicker-toggle>\\n    <mat-datepicker #startDate></mat-datepicker>\\n  </mat-form-field>\\n  <mat-form-field style=\\\"width: 50%\\\" color=\\\"accent\\\">\\n    <mat-label>End date</mat-label>\\n    <input matInput\\n           type=\\\"date\\\"\\n           [matDatepicker]=\\\"endDate\\\"\\n           [formControl]=\\\"form.get('endDate')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('endDate').hasError('required')\\\">\\n      End date is <strong>required</strong>\\n    </mat-error>\\n    <mat-datepicker-toggle matSuffix [for]=\\\"endDate\\\"></mat-datepicker-toggle>\\n    <mat-datepicker #endDate color=\\\"primary\\\"></mat-datepicker>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"number\\\"\\n           placeholder=\\\"Amount\\\"\\n           [formControl]=\\\"form.get('amount')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('amount').hasError('min') && !form.get('amount').hasError('required')\\\">\\n      Please enter a valid amount (Minimum: 1)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('amount').hasError('required')\\\">\\n      Amount is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field>\\n    <mat-select\\n      placeholder=\\\"Coupon type\\\"\\n      [formControl]=\\\"form.get('couponType')\\\"\\n    >\\n      <mat-option *ngFor=\\\"let coupon of coupons\\\" [value]=\\\"coupon.value\\\">\\n        {{coupon.value}}\\n      </mat-option>\\n    </mat-select>\\n    <mat-error *ngIf=\\\"form.get('couponType').hasError('required')\\\">\\n      Coupon type is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Message\\\"\\n           [formControl]=\\\"form.get('message')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('message').hasError('minlength') && !form.get('message').hasError('required')\\\">\\n      Please enter a valid message (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('message').hasError('maxlength') && !form.get('message').hasError('required')\\\">\\n      Please enter a valid message (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('message').hasError('required')\\\">\\n      Message is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"number\\\"\\n           placeholder=\\\"Price\\\"\\n           [formControl]=\\\"form.get('price')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('price').hasError('min') && !form.get('price').hasError('required')\\\">\\n      Please enter a valid price (Minimum: 1)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('price').hasError('required')\\\">\\n      Price is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"number\\\"\\n           placeholder=\\\"Company ID\\\"\\n           [formControl]=\\\"form.get('companyId')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('companyId').hasError('required')\\\">\\n      Company ID is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Add</button>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\nimport {Coupon, CouponType} from '../../models/coupon';\nimport {MatSnackBar} from '@angular/material';\nimport {AdminService} from '../../shared/services/admin.service';\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-create-coupon',\n  templateUrl: './create-coupon.component.html',\n  styleUrls: ['../../../app/shared/layouts/company/company.component.css']\n})\nexport class CreateCouponComponent implements OnInit {\n\n  form: FormGroup;\n\n  matcher = new MyErrorStateMatcher();\n\n  coupons: CouponType[] = [\n    {value: 'FOOD'},\n    {value: 'SPORTS'},\n    {value: 'HEALTH'},\n    {value: 'CAMPING'},\n    {value: 'TRAVELLING'},\n    {value: 'RESTAURANTS'},\n    {value: 'ELECTRICITY'}\n  ];\n\n  constructor(private admin: AdminService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n\n      title: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      startDate: new FormControl(null, [\n        Validators.required\n      ]),\n\n      endDate: new FormControl(null, [\n        Validators.required\n      ]),\n\n      amount: new FormControl(null, [\n        Validators.required,\n        Validators.min(1)\n      ]),\n\n      couponType: new FormControl(null, [\n        Validators.required\n      ]),\n\n      message: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      price: new FormControl(null, [\n        Validators.required,\n        Validators.min(1)\n      ]),\n\n      companyId: new FormControl(null, [\n        Validators.required\n      ])\n\n    });\n  }\n\n  onSubmit() {\n    const coupon: Coupon = {\n      title: this.form.value.title,\n      startDate: new DatePipe('en-US').transform(this.form.value.startDate, 'yyyy-MM-dd'),\n      endDate: new DatePipe('en-US').transform(this.form.value.endDate, 'yyyy-MM-dd'),\n      amount: this.form.value.amount,\n      couponType: this.form.value.couponType,\n      message: this.form.value.message,\n      price: this.form.value.price,\n      companyId: this.form.value.companyId\n    };\n\n    this.admin.createCoupon(coupon).subscribe(\n      () => this.snackBar.open('New coupon successfully added.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n}\n","module.exports = \"<form class=\\\"example-form div2 animated bounceInRight\\\"\\n      (ngSubmit)=\\\"onSubmit()\\\"\\n>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Customer name\\\"\\n           [formControl]=\\\"form.get('name')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('name').hasError('minlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid name (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('maxlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid name (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('required')\\\">\\n      Name is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Email\\\"\\n           [formControl]=\\\"form.get('email')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('email').hasError('email') && !form.get('email').hasError('required')\\\">\\n      Please enter a valid email address\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('email').hasError('maxlength') && !form.get('email').hasError('required')\\\">\\n      Please enter a valid email (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('email').hasError('required')\\\">\\n      Email is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"password\\\"\\n           placeholder=\\\"Password\\\"\\n           [formControl]=\\\"form.get('password')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('password').hasError('minlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('maxlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('required')\\\">\\n      Password is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Add</button>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AdminService} from '../../shared/services/admin.service';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\nimport {MatSnackBar} from '@angular/material';\n\n@Component({\n  selector: 'app-create-customer',\n  templateUrl: './create-customer.component.html',\n  styleUrls: ['../../../app/shared/layouts/admin/admin.component.css']\n})\nexport class CreateCustomerComponent implements OnInit {\n\n  form: FormGroup;\n\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private admin: AdminService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.email,\n        Validators.maxLength(20)\n      ]),\n\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ])\n\n    });\n  }\n\n  onSubmit() {\n    this.admin.createCustomer(this.form.value).subscribe(\n      () => this.snackBar.open('New customer successfully added.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n}\n","module.exports = \"<h3>Company Table</h3>\\n<form class=\\\"div2 animated bounceInRight\\\">\\n  <mat-form-field>\\n    <input matInput (keyup)=\\\"companyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n  <link href='https://fonts.googleapis.com/css?family=Notable' rel='stylesheet'>\\n  <table mat-table [dataSource]=\\\"companySource\\\" multiTemplateDataRows class=\\\"mat-elevation-z8\\\">\\n\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef>Name</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.name}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"password\\\">\\n      <th mat-header-cell *matHeaderCellDef>Password</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.password}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"email\\\">\\n      <th mat-header-cell *matHeaderCellDef>Email</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\n    </ng-container>\\n\\n\\n\\n\\n    \\n    <ng-container matColumnDef=\\\"expandedDetail\\\">\\n      <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"companyColumns.length\\\">\\n        <div class=\\\"example-element-detail\\\"\\n             [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n          <div class=\\\"example-element-description\\\">\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onShowUpdate()\\\"\\n            >Update\\n            </button>\\n            <br>\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onDelete(element.id)\\\"\\n            >Remove\\n            </button>\\n            <br>\\n            <form *ngIf=\\\"showUpdate\\\" class=\\\"example-form div2 animated bounceInUp faster\\\"\\n                  (ngSubmit)=\\\"onUpdate(element.id)\\\"\\n            >\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       placeholder=\\\"Name\\\"\\n                       [formControl]=\\\"form.get('name')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('name').hasError('minlength') && !form.get('name').hasError('required')\\\">\\n                  Please enter a valid name (Minimum length: 4)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('name').hasError('maxlength') && !form.get('name').hasError('required')\\\">\\n                  Please enter a valid name (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('name').hasError('required')\\\">\\n                  Name is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       placeholder=\\\"Email\\\"\\n                       [formControl]=\\\"form.get('email')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('email').hasError('email') && !form.get('email').hasError('required')\\\">\\n                  Please enter a valid email address\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('email').hasError('maxlength') && !form.get('email').hasError('required')\\\">\\n                  Please enter a valid email (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('email').hasError('required')\\\">\\n                  Email is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       type=\\\"password\\\"\\n                       placeholder=\\\"Password\\\"\\n                       [formControl]=\\\"form.get('password')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error\\n                  *ngIf=\\\"form.get('password').hasError('minlength') && !form.get('password').hasError('required')\\\">\\n                  Please enter a valid password (Minimum length: 4)\\n                </mat-error>\\n                <mat-error\\n                  *ngIf=\\\"form.get('password').hasError('maxlength') && !form.get('password').hasError('required')\\\">\\n                  Please enter a valid password (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('password').hasError('required')\\\">\\n                  Password is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Update</button>\\n            </form>\\n          </div>\\n        </div>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"companyColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let element; columns: companyColumns;\\\"\\n        class=\\\"example-element-row\\\"\\n        [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n        (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n    </tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n  </table>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatSnackBar, MatTableDataSource} from '@angular/material';\nimport {Company} from '../../models/company';\nimport {AdminService} from '../../shared/services/admin.service';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\n\n@Component({\n  selector: 'app-get-companies',\n  templateUrl: './get-companies.component.html',\n  styleUrls: ['../../../app/shared/layouts/admin/admin.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class GetCompaniesComponent implements OnInit {\n\n  companyColumns: string[] = ['name', 'password', 'email'];\n  companySource: MatTableDataSource<Company>;\n  expandedElement: Company | null;\n\n  form: FormGroup;\n  matcher = new MyErrorStateMatcher();\n  showUpdate = false;\n\n  constructor(private admin: AdminService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.admin.getAllCompanies().subscribe(comps => this.companySource = new MatTableDataSource(comps),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n\n    this.form = new FormGroup({\n\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.email,\n        Validators.maxLength(20)\n      ]),\n\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ])\n\n    });\n  }\n\n  companyFilter(filterValue: string) {\n    this.companySource.filter = filterValue.trim().toLowerCase();\n  }\n\n  onDelete(id: number) {\n    this.admin.deleteCompany(id).subscribe(\n      () => this.snackBar.open('Company successfully removed.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onUpdate(id: number) {\n    const company: Company = {\n      id: id,\n      name: this.form.value.name,\n      password: this.form.value.password,\n      email: this.form.value.email\n    };\n    this.admin.updateCompany(company).subscribe(\n      () => this.snackBar.open('Company successfully updated.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onShowUpdate() {\n    this.showUpdate === false ? this.showUpdate = true : this.showUpdate = false;\n  }\n\n}\n","module.exports = \"<h3>Coupon Table</h3>\\n<form class=\\\"div2 animated bounceInRight\\\">\\n  <mat-form-field>\\n    <input matInput (keyup)=\\\"couponFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n\\n  <table mat-table [dataSource]=\\\"couponSource\\\" multiTemplateDataRows class=\\\"mat-elevation-z8\\\">\\n\\n    <ng-container matColumnDef=\\\"title\\\">\\n      <th mat-header-cell *matHeaderCellDef>Title</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.title}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"startDate\\\">\\n      <th mat-header-cell *matHeaderCellDef>Creation Date</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.startDate}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"endDate\\\">\\n      <th mat-header-cell *matHeaderCellDef>Experation Date</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.endDate}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"amount\\\">\\n      <th mat-header-cell *matHeaderCellDef>Amount</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.amount}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"couponType\\\">\\n      <th mat-header-cell *matHeaderCellDef>Coupon Type</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.couponType}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"message\\\">\\n      <th mat-header-cell *matHeaderCellDef>Message</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.message}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"price\\\">\\n      <th mat-header-cell *matHeaderCellDef>Price</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"companyId\\\">\\n      <th mat-header-cell *matHeaderCellDef>Company ID</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.companyId}} </td>\\n    </ng-container>\\n\\n\\n<!-- ['title', 'startDate', 'endDate', 'amount', 'couponType', 'message', 'price', 'companyId'] -->\\n\\n\\n    <ng-container matColumnDef=\\\"expandedDetail\\\">\\n      <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"couponColumns.length\\\">\\n        <div class=\\\"example-element-detail\\\"\\n             [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n          <div class=\\\"example-element-description\\\">\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onShowUpdate()\\\"\\n            >Update\\n            </button>\\n            <br>\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onDelete(element.id)\\\"\\n            >Remove\\n            </button>\\n            <br>\\n            <form *ngIf=\\\"showUpdate\\\" class=\\\"example-form div2 animated bounceInUp faster\\\"\\n                  (ngSubmit)=\\\"onUpdate(element.id)\\\"\\n            >\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       placeholder=\\\"Title\\\"\\n                       [formControl]=\\\"form.get('Title')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('Title').hasError('minlength') && !form.get('Title').hasError('required')\\\">\\n                  Please enter a valid title (Minimum length: 4)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('Title').hasError('maxlength') && !form.get('Title').hasError('required')\\\">\\n                  Please enter a valid title (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('Title').hasError('required')\\\">\\n                  Title is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field style=\\\"width: 50%\\\" color=\\\"accent\\\">\\n                <mat-label>Start date</mat-label>\\n                <input matInput\\n                       type=\\\"date\\\"\\n                       [matDatepicker]=\\\"startDate\\\"\\n                       [formControl]=\\\"form.get('startDate')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('startDate').hasError('required')\\\">\\n                  Start date is <strong>required</strong>\\n                </mat-error>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"startDate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #startDate></mat-datepicker>\\n              </mat-form-field>\\n              <mat-form-field style=\\\"width: 50%\\\" color=\\\"accent\\\">\\n                <mat-label>End date</mat-label>\\n                <input matInput\\n                       type=\\\"date\\\"\\n                       [matDatepicker]=\\\"endDate\\\"\\n                       [formControl]=\\\"form.get('endDate')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('endDate').hasError('required')\\\">\\n                  End date is <strong>required</strong>\\n                </mat-error>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"endDate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #endDate color=\\\"primary\\\"></mat-datepicker>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       type=\\\"number\\\"\\n                       placeholder=\\\"Amount\\\"\\n                       [formControl]=\\\"form.get('amount')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('amount').hasError('min') && !form.get('amount').hasError('required')\\\">\\n                  Please enter a valid amount (Minimum: 1)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('amount').hasError('required')\\\">\\n                  Amount is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field>\\n                <mat-select\\n                  placeholder=\\\"Coupon type\\\"\\n                  [formControl]=\\\"form.get('couponType')\\\"\\n                >\\n                  <mat-option *ngFor=\\\"let coupon of coupons\\\" [value]=\\\"coupon.value\\\">\\n                    {{coupon.value}}\\n                  </mat-option>\\n                </mat-select>\\n                <mat-error *ngIf=\\\"form.get('couponType').hasError('required')\\\">\\n                  Coupon type is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       placeholder=\\\"Message\\\"\\n                       [formControl]=\\\"form.get('message')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error\\n                  *ngIf=\\\"form.get('message').hasError('minlength') && !form.get('message').hasError('required')\\\">\\n                  Please enter a valid message (Minimum length: 4)\\n                </mat-error>\\n                <mat-error\\n                  *ngIf=\\\"form.get('message').hasError('maxlength') && !form.get('message').hasError('required')\\\">\\n                  Please enter a valid message (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('message').hasError('required')\\\">\\n                  Message is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       type=\\\"number\\\"\\n                       placeholder=\\\"Price\\\"\\n                       [formControl]=\\\"form.get('price')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('price').hasError('min') && !form.get('price').hasError('required')\\\">\\n                  Please enter a valid price (Minimum: 1)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('price').hasError('required')\\\">\\n                  Price is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       type=\\\"number\\\"\\n                       placeholder=\\\"Company ID\\\"\\n                       [formControl]=\\\"form.get('companyId')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('companyId').hasError('required')\\\">\\n                  Company ID is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Update</button>\\n            </form>\\n          </div>\\n        </div>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"couponColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let element; columns: couponColumns;\\\"\\n        class=\\\"example-element-row\\\"\\n        [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n        (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n    </tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n  </table>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatSnackBar, MatTableDataSource} from '@angular/material';\nimport {Coupon, CouponType} from '../../models/coupon';\nimport {AdminService} from '../../shared/services/admin.service';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {Company} from '../../models/company';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-get-coupons',\n  templateUrl: './get-coupons.component.html',\n  styleUrls: ['../../../app/shared/layouts/admin/admin.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class GetCouponsComponent implements OnInit {\n\n  couponColumns: string[] = ['title', 'startDate', 'endDate', 'amount', 'couponType', 'message', 'price', 'companyId'];\n  couponSource: MatTableDataSource<Coupon>;\n  expandedElement: Company | null;\n\n  form: FormGroup;\n  matcher = new MyErrorStateMatcher();\n  showUpdate = false;\n\n  coupons: CouponType[] = [\n    {value: 'FOOD'},\n    {value: 'SPORTS'},\n    {value: 'HEALTH'},\n    {value: 'CAMPING'},\n    {value: 'TRAVELLING'},\n    {value: 'RESTAURANTS'},\n    {value: 'ELECTRICITY'}\n  ];\n\n  constructor(private admin: AdminService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.admin.getAllCoupons().subscribe(coupons => this.couponSource = new MatTableDataSource(coupons),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n\n    this.form = new FormGroup({\n\n      title: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      startDate: new FormControl(null, [\n        Validators.required\n      ]),\n\n      endDate: new FormControl(null, [\n        Validators.required\n      ]),\n\n      amount: new FormControl(null, [\n        Validators.required,\n        Validators.min(1)\n      ]),\n\n      couponType: new FormControl(null, [\n        Validators.required\n      ]),\n\n      message: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      price: new FormControl(null, [\n        Validators.required,\n        Validators.min(1)\n      ]),\n\n      companyId: new FormControl(null, [\n        Validators.required\n      ])\n\n    });\n  }\n\n  couponFilter(filterValue: string) {\n    this.couponSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  onDelete(id: number) {\n    this.admin.deleteCoupon(id).subscribe(\n      () => this.snackBar.open('Coupon successfully removed.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onUpdate(id: number) {\n    const coupon: Coupon = {\n      id: id,\n      title: this.form.value.title,\n      startDate: new DatePipe('en-US').transform(this.form.value.startDate, 'yyyy-MM-dd'),\n      endDate: new DatePipe('en-US').transform(this.form.value.endDate, 'yyyy-MM-dd'),\n      amount: this.form.value.amount,\n      couponType: this.form.value.couponType,\n      message: this.form.value.message,\n      price: this.form.value.price,\n      companyId: this.form.value.companyId\n    };\n\n    this.admin.updateCoupon(coupon).subscribe(\n      () => this.snackBar.open('Coupon successfully updated.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onShowUpdate() {\n    this.showUpdate === false ? this.showUpdate = true : this.showUpdate = false;\n  }\n\n}\n","module.exports = \"<h3>Customer Table</h3>\\n<div class=\\\"div2 animated bounceInRight\\\">\\n  <mat-form-field>\\n    <input matInput (keyup)=\\\"customerFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n\\n   <table mat-table [dataSource]=\\\"customerSource\\\" multiTemplateDataRows class=\\\"mat-elevation-z8\\\">\\n\\n     <ng-container matColumnDef=\\\"name\\\">\\n       <th mat-header-cell *matHeaderCellDef>Name</th>\\n       <td mat-cell *matCellDef=\\\"let element\\\">{{element.name}} </td>\\n     </ng-container>\\n\\n     <ng-container matColumnDef=\\\"password\\\">\\n       <th mat-header-cell *matHeaderCellDef>Password</th>\\n       <td mat-cell *matCellDef=\\\"let element\\\">{{element.password}} </td>\\n     </ng-container>\\n\\n     <ng-container matColumnDef=\\\"email\\\">\\n       <th mat-header-cell *matHeaderCellDef>Email</th>\\n       <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\n     </ng-container>\\n\\n\\n\\n\\n\\n    <ng-container matColumnDef=\\\"expandedDetail\\\">\\n      <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"customerColumns.length\\\">\\n        <div class=\\\"example-element-detail\\\"\\n             [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n          <div class=\\\"example-element-description\\\">\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onShowUpdate()\\\"\\n            >Update\\n            </button>\\n            <br>\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onDelete(element.id)\\\"\\n            >Remove\\n            </button>\\n            <br>\\n            <form *ngIf=\\\"showUpdate\\\" class=\\\"example-form div2 animated bounceInUp faster\\\"\\n                  (ngSubmit)=\\\"onUpdate(element.id)\\\"\\n            >\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       placeholder=\\\"Name\\\"\\n                       [formControl]=\\\"form.get('name')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('name').hasError('minlength') && !form.get('name').hasError('required')\\\">\\n                  Please enter a valid name (Minimum length: 4)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('name').hasError('maxlength') && !form.get('name').hasError('required')\\\">\\n                  Please enter a valid name (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('name').hasError('required')\\\">\\n                  Name is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       placeholder=\\\"Email\\\"\\n                       [formControl]=\\\"form.get('email')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('email').hasError('email') && !form.get('email').hasError('required')\\\">\\n                  Please enter a valid email address\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('email').hasError('maxlength') && !form.get('email').hasError('required')\\\">\\n                  Please enter a valid email (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('email').hasError('required')\\\">\\n                  Email is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       type=\\\"password\\\"\\n                       placeholder=\\\"Password\\\"\\n                       [formControl]=\\\"form.get('password')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error\\n                  *ngIf=\\\"form.get('password').hasError('minlength') && !form.get('password').hasError('required')\\\">\\n                  Please enter a valid password (Minimum length: 4)\\n                </mat-error>\\n                <mat-error\\n                  *ngIf=\\\"form.get('password').hasError('maxlength') && !form.get('password').hasError('required')\\\">\\n                  Please enter a valid password (Maximum length: 20)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('password').hasError('required')\\\">\\n                  Password is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Update</button>\\n            </form>\\n          </div>\\n        </div>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"customerColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let element; columns: customerColumns;\\\"\\n        class=\\\"example-element-row\\\"\\n        [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n        (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n    </tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n  </table>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatSnackBar, MatTableDataSource} from '@angular/material';\nimport {AdminService} from '../../shared/services/admin.service';\nimport {Customer} from '../../models/customer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {Company} from '../../models/company';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\n\n@Component({\n  selector: 'app-get-customers',\n  templateUrl: './get-customers.component.html',\n  styleUrls: ['../../../app/shared/layouts/admin/admin.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class GetCustomersComponent implements OnInit {\n\n  customerColumns: string[] = ['name', 'password', 'email'];\n  customerSource: MatTableDataSource<Customer>;\n  expandedElement: Company | null;\n\n  form: FormGroup;\n  matcher = new MyErrorStateMatcher();\n  showUpdate = false;\n\n  constructor(private admin: AdminService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.admin.getAllCustomers().subscribe(customers => this.customerSource = new MatTableDataSource(customers),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n\n    this.form = new FormGroup({\n\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.email,\n        Validators.maxLength(20)\n      ]),\n\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ])\n\n    });\n  }\n\n  customerFilter(filterValue: string) {\n    this.customerSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  onDelete(id: number) {\n    this.admin.deleteCustomer(id).subscribe(\n      () => this.snackBar.open('Customer successfully removed.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onUpdate(id: number) {\n    const customer: Customer = {\n      id: id,\n      name: this.form.value.name,\n      password: this.form.value.password,\n      email: this.form.value.email\n    };\n    this.admin.updateCustomer(customer).subscribe(\n      () => this.snackBar.open('Customer successfully updated.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onShowUpdate() {\n    this.showUpdate === false ? this.showUpdate = true : this.showUpdate = false;\n  }\n\n}\n\n","module.exports = \"<h3>Income Table</h3>\\n<form class=\\\"div2 animated bounceInRight\\\">\\n  <mat-form-field>\\n    <input matInput (keyup)=\\\"incomeFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n\\n  <table mat-table [dataSource]=\\\"incomeSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- Company name column -->\\n    <ng-container matColumnDef=\\\"companyName\\\">\\n      <th mat-header-cell *matHeaderCellDef>Company Name</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.companyName}} </td>\\n    </ng-container>\\n\\n    <!-- Customer name column -->\\n    <ng-container matColumnDef=\\\"customerName\\\">\\n      <th mat-header-cell *matHeaderCellDef>Customer Name</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.customerName}} </td>\\n    </ng-container>\\n\\n    <!-- Date column -->\\n    <ng-container matColumnDef=\\\"date\\\">\\n      <th mat-header-cell *matHeaderCellDef>@ Date</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.date}} </td>\\n    </ng-container>\\n\\n    <!-- ExperationDate column\\n    <ng-container matColumnDef=\\\"expDate\\\">\\n      <th mat-header-cell *matHeaderCellDef>ExperationDate</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.expDate}} </td>\\n    </ng-container> -->\\n\\n    <!-- Description column -->\\n    <ng-container matColumnDef=\\\"description\\\">\\n      <th mat-header-cell *matHeaderCellDef>Description</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.description}} </td>\\n    </ng-container>\\n\\n      <!-- Price column -->\\n      <ng-container matColumnDef=\\\"price\\\">\\n       <th mat-header-cell *matHeaderCellDef>Price</th>\\n       <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price}} </td>\\n      </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"incomeColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: incomeColumns;\\\"></tr>\\n  </table>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatSnackBar, MatTableDataSource} from '@angular/material';\nimport {Income} from '../../models/income';\nimport {AdminService} from '../../shared/services/admin.service';\n\n@Component({\n  selector: 'app-get-all-incomes',\n  templateUrl: './get-incomes.component.html',\n  styleUrls: ['../../../app/shared/layouts/admin/admin.component.css']\n})\nexport class GetIncomesComponent implements OnInit {\n\n  incomeColumns: string[] = ['companyName', 'customerName', 'description' , 'date', 'price'];\n  incomeSource: MatTableDataSource<Income>;\n\n  constructor(private admin: AdminService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.admin.getIncomes().subscribe(incomes => this.incomeSource = new MatTableDataSource(incomes),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  incomeFilter(filterValue: string) {\n    this.incomeSource.filter = filterValue.trim().toLowerCase();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminComponent } from './shared/layouts/admin/admin.component';\nimport { LoginComponent } from './login/login.component';\nimport { CompanyComponent } from './shared/layouts/company/company.component';\nimport { CustomerComponent } from './shared/layouts/customer/customer.component';\nimport { AuthorisationComponent } from './shared/layouts/authorisation/authorisation.component';\nimport { RegistrationComponent } from './registration/registration.component';\nimport { CreateCompanyComponent } from './admin/create-company/create-company.component';\nimport { GetCompaniesComponent } from './admin/get-companies/get-companies.component';\nimport { CreateCustomerComponent } from './admin/create-customer/create-customer.component';\nimport { GetCustomersComponent } from './admin/get-customers/get-customers.component';\nimport { CreateCompanyCouponComponent } from './company/create-company-coupon/create-company-coupon.component';\nimport { GetCompanyCouponsComponent } from './company/get-company-coupons/get-company-coupons.component';\nimport { PurchaseCouponComponent } from './customer/purchase-coupon/purchase-coupon.component';\nimport { GetCustomerCouponsComponent } from './customer/get-customer-coupons/get-customer-coupons.component';\nimport { CreateCouponComponent } from './admin/create-coupon/create-coupon.component';\nimport { GetCouponsComponent } from './admin/get-coupons/get-coupons.component';\nimport { AdminAuthGuard } from './shared/guards/admin-auth.guard';\nimport { Page404Component } from './shared/page404/page404.component';\nimport { CompanyAuthGuard } from './shared/guards/company-auth.guard';\nimport { CustomerAuthGuard } from './shared/guards/customer-auth.guard';\nimport { GetIncomesComponent } from './admin/get-incomes/get-incomes.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: AuthorisationComponent, children: [\n      { path: '', redirectTo: 'login', pathMatch: 'full' },\n      { path: 'login', component: LoginComponent },\n      { path: 'registration', component: RegistrationComponent }\n    ]\n  },\n  {\n\n    path: 'admin', component: AdminComponent, canActivate: [AdminAuthGuard], children: [\n      { path: 'create-company', component: CreateCompanyComponent },\n      { path: 'get-companies', component: GetCompaniesComponent },\n      { path: 'create-coupon', component: CreateCouponComponent },\n      { path: 'get-coupons', component: GetCouponsComponent },\n      { path: 'create-customer', component: CreateCustomerComponent },\n      { path: 'get-customers', component: GetCustomersComponent },\n      { path: 'get-incomes', component: GetIncomesComponent }\n    ]\n  },\n  {\n    path: 'company', component: CompanyComponent, canActivate: [CompanyAuthGuard], children: [\n      { path: 'create-coupon', component: CreateCompanyCouponComponent },\n      { path: 'my-coupons', component: GetCompanyCouponsComponent }\n    ]\n  },\n  {\n    path: 'customer', component: CustomerComponent, canActivate: [CustomerAuthGuard], children: [\n      { path: 'purchase-coupon', component: PurchaseCouponComponent },\n      { path: 'my-coupons', component: GetCustomerCouponsComponent }\n    ]\n  },\n  { path: '**', component: Page404Component }\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>'\n})\nexport class AppComponent {\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {AppRoutingModule} from './app-routing.module';\nimport {NgProgressModule} from '@ngx-progressbar/core';\nimport {NgProgressRouterModule} from '@ngx-progressbar/router';\nimport {ServiceWorkerModule} from '@angular/service-worker';\nimport {HttpClientModule} from '@angular/common/http';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {environment} from '../environments/environment';\n\nimport {AppComponent} from './app.component';\nimport {SharedModule} from './shared/shared.module';\nimport {AuthorisationComponent} from './shared/layouts/authorisation/authorisation.component';\nimport {LoginComponent} from './login/login.component';\nimport {RegistrationComponent} from './registration/registration.component';\nimport {AdminComponent} from './shared/layouts/admin/admin.component';\nimport {CompanyComponent} from './shared/layouts/company/company.component';\nimport {CustomerComponent} from './shared/layouts/customer/customer.component';\nimport {CreateCompanyComponent} from './admin/create-company/create-company.component';\nimport {GetCompaniesComponent} from './admin/get-companies/get-companies.component';\nimport {CreateCustomerComponent} from './admin/create-customer/create-customer.component';\nimport {GetCustomersComponent} from './admin/get-customers/get-customers.component';\nimport {CreateCompanyCouponComponent} from './company/create-company-coupon/create-company-coupon.component';\nimport {GetCompanyCouponsComponent} from './company/get-company-coupons/get-company-coupons.component';\nimport {PurchaseCouponComponent} from './customer/purchase-coupon/purchase-coupon.component';\nimport {GetCustomerCouponsComponent} from './customer/get-customer-coupons/get-customer-coupons.component';\nimport {GetCouponsComponent} from './admin/get-coupons/get-coupons.component';\nimport {CreateCouponComponent} from './admin/create-coupon/create-coupon.component';\nimport {Page404Component} from './shared/page404/page404.component';\nimport {GetIncomesComponent} from './admin/get-incomes/get-incomes.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    Page404Component,\n    AuthorisationComponent,\n    LoginComponent,\n    RegistrationComponent,\n    AdminComponent,\n    CreateCompanyComponent,\n    GetCompaniesComponent,\n    CreateCouponComponent,\n    GetCouponsComponent,\n    CreateCustomerComponent,\n    GetCustomersComponent,\n    CompanyComponent,\n    CreateCompanyCouponComponent,\n    GetCompanyCouponsComponent,\n    CustomerComponent,\n    PurchaseCouponComponent,\n    GetCustomerCouponsComponent,\n    GetIncomesComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    SharedModule,\n    AppRoutingModule,\n    NgProgressModule.forRoot(),\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    NgProgressRouterModule,\n    ServiceWorkerModule.register('/ngsw-worker.js', {enabled: environment.production})\n\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \"<h3>Coupon Creation Menu</h3>\\n<link href='https://fonts.googleapis.com/css?family=Notable' rel='stylesheet'>\\n<form class=\\\"example-form div2 animated bounceInRight\\\"\\n      (ngSubmit)=\\\"onSubmit()\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Title\\\"\\n           [formControl]=\\\"form.get('title')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('title').hasError('minlength') && !form.get('title').hasError('required')\\\">\\n      Please enter a valid title (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('title').hasError('maxlength') && !form.get('title').hasError('required')\\\">\\n      Please enter a valid title (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('title').hasError('required')\\\">\\n      Title is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field style=\\\"width: 50%\\\" color=\\\"accent\\\">\\n    <input matInput\\n           placeholder=\\\"Start date\\\"\\n           [formControl]=\\\"form.get('startDate')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n           [matDatepicker]=\\\"startDate\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('startDate').hasError('required')\\\">\\n      Start date is <strong>required</strong>\\n    </mat-error>\\n    <mat-datepicker-toggle matSuffix [for]=\\\"startDate\\\"></mat-datepicker-toggle>\\n    <mat-datepicker #startDate></mat-datepicker>\\n  </mat-form-field>\\n  <mat-form-field style=\\\"width: 50%\\\" color=\\\"accent\\\">\\n    <input matInput\\n           placeholder=\\\"End date\\\"\\n           [formControl]=\\\"form.get('endDate')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n           [matDatepicker]=\\\"endDate\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('endDate').hasError('required')\\\">\\n      End date is <strong>required</strong>\\n    </mat-error>\\n    <mat-datepicker-toggle matSuffix [for]=\\\"endDate\\\"></mat-datepicker-toggle>\\n    <mat-datepicker #endDate color=\\\"primary\\\"></mat-datepicker>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"number\\\"\\n           placeholder=\\\"Amount\\\"\\n           [formControl]=\\\"form.get('amount')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('amount').hasError('min') && !form.get('amount').hasError('required')\\\">\\n      Please enter a valid amount (Minimum: 1)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('amount').hasError('required')\\\">\\n      Amount is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field>\\n    <mat-select\\n      placeholder=\\\"Coupon type\\\"\\n      [formControl]=\\\"form.get('couponType')\\\"\\n    >\\n      <mat-option *ngFor=\\\"let coupon of coupons\\\" [value]=\\\"coupon.value\\\">\\n        {{coupon.value}}\\n      </mat-option>\\n    </mat-select>\\n    <mat-error *ngIf=\\\"form.get('couponType').hasError('required')\\\">\\n      Coupon type is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Message\\\"\\n           [formControl]=\\\"form.get('message')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('message').hasError('minlength') && !form.get('message').hasError('required')\\\">\\n      Please enter a valid message (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('message').hasError('maxlength') && !form.get('message').hasError('required')\\\">\\n      Please enter a valid message (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('message').hasError('required')\\\">\\n      Message is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"number\\\"\\n           placeholder=\\\"Price\\\"\\n           [formControl]=\\\"form.get('price')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('price').hasError('min') && !form.get('price').hasError('required')\\\">\\n      Please enter a valid price (Minimum: 1)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('price').hasError('required')\\\">\\n      Price is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Add</button>\\n</form>\\n\"","import {Component} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Coupon, CouponType} from '../../models/coupon';\nimport {CompanyService} from '../../shared/services/company.service';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\nimport {MatSnackBar} from '@angular/material';\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-create-coupon',\n  templateUrl: './create-company-coupon.component.html',\n  styleUrls: ['../../../app/shared/layouts/company/company.component.css']\n})\nexport class CreateCompanyCouponComponent {\n\n  form = new FormGroup({\n\n    title: new FormControl(null, [\n      Validators.required,\n      Validators.minLength(4),\n      Validators.maxLength(20)\n    ]),\n\n    startDate: new FormControl(null, [\n      Validators.required\n    ]),\n\n    endDate: new FormControl(null, [\n      Validators.required\n    ]),\n\n    amount: new FormControl(null, [\n      Validators.required,\n      Validators.min(1)\n    ]),\n\n    couponType: new FormControl(null, [\n      Validators.required\n    ]),\n\n    message: new FormControl(null, [\n      Validators.required,\n      Validators.minLength(4),\n      Validators.maxLength(20)\n    ]),\n\n    price: new FormControl(null, [\n      Validators.required,\n      Validators.min(1)\n    ]),\n\n  });\n\n  matcher = new MyErrorStateMatcher();\n\n  coupons: CouponType[] = [\n    {value: 'FOOD'},\n    {value: 'SPORTS'},\n    {value: 'HEALTH'},\n    {value: 'CAMPING'},\n    {value: 'TRAVELLING'},\n    {value: 'RESTAURANTS'},\n    {value: 'ELECTRICITY'}\n  ];\n\n  constructor(private company: CompanyService,\n              private snackBar: MatSnackBar) {\n  }\n\n  onSubmit() {\n    const coupon: Coupon = {\n      title: this.form.value.title,\n      startDate: new DatePipe('en-US').transform(this.form.value.startDate, 'yyyy-MM-dd'),\n      endDate: new DatePipe('en-US').transform(this.form.value.endDate, 'yyyy-MM-dd'),\n      amount: this.form.value.amount,\n      couponType: this.form.value.couponType,\n      message: this.form.value.message,\n      price: this.form.value.price,\n    };\n\n    this.company.createCoupon(coupon).subscribe(\n      () => this.snackBar.open('New coupon successfully added.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n}\n","module.exports = \"<h3>Company's Coupon Information </h3>\\n\\n<form class=\\\"div2 animated bounceInRight\\\">\\n  <mat-form-field>\\n    <input matInput (keyup)=\\\"couponFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n\\n<table mat-table [dataSource]=\\\"couponSource\\\" multiTemplateDataRows class=\\\"mat-elevation-z8\\\">\\n\\n  <ng-container matColumnDef=\\\"title\\\">\\n    <th mat-header-cell *matHeaderCellDef>Title</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">{{element.title}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"startDate\\\">\\n    <th mat-header-cell *matHeaderCellDef>Creation Date</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\">{{element.startDate}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"endDate\\\">\\n    <th mat-header-cell *matHeaderCellDef>Experation Date</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.endDate}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"amount\\\">\\n    <th mat-header-cell *matHeaderCellDef>Amount</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.amount}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"couponType\\\">\\n    <th mat-header-cell *matHeaderCellDef>Coupon Type</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.couponType}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"message\\\">\\n    <th mat-header-cell *matHeaderCellDef>Message</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.message}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"price\\\">\\n    <th mat-header-cell *matHeaderCellDef>Price</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price}} </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\\"companyId\\\">\\n    <th mat-header-cell *matHeaderCellDef>Company ID</th>\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.companyId}} </td>\\n  </ng-container>\\n\\n\\n\\n    <ng-container matColumnDef=\\\"expandedDetail\\\">\\n      <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"couponColumns.length\\\">\\n        <div class=\\\"example-element-detail\\\"\\n             [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n          <div class=\\\"example-element-description\\\">\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onShowUpdate()\\\"\\n            >Update\\n            </button>\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onDelete(element.id)\\\"\\n            >Remove\\n            </button>\\n            <br>\\n            <form *ngIf=\\\"showUpdate\\\" class=\\\"example-form div2 animated bounceInUp faster\\\"\\n                  (ngSubmit)=\\\"onUpdate(element.id)\\\"\\n            >\\n              <mat-form-field color=\\\"accent\\\">\\n                <mat-label>End date</mat-label>\\n                <input matInput\\n                       [matDatepicker]=\\\"endDate\\\"\\n                       [formControl]=\\\"form.get('endDate')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('endDate').hasError('required')\\\">\\n                  End date is <strong>required</strong>\\n                </mat-error>\\n                <mat-datepicker-toggle matSuffix [for]=\\\"endDate\\\"></mat-datepicker-toggle>\\n                <mat-datepicker #endDate color=\\\"primary\\\"></mat-datepicker>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       type=\\\"number\\\"\\n                       placeholder=\\\"Price\\\"\\n                       [formControl]=\\\"form.get('price')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('price').hasError('min') && !form.get('price').hasError('required')\\\">\\n                  Please enter a valid price (Minimum: 1)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('price').hasError('required')\\\">\\n                  Price is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <br>\\n              <mat-form-field class=\\\"example-full-width\\\">\\n                <input matInput\\n                       type=\\\"number\\\"\\n                       placeholder=\\\"Amount\\\"\\n                       [formControl]=\\\"form.get('amount')\\\"\\n                       [errorStateMatcher]=\\\"matcher\\\"\\n                >\\n                <mat-error *ngIf=\\\"form.get('amount').hasError('min') && !form.get('amount').hasError('required')\\\">\\n                  Please enter a valid amount (Minimum: 1)\\n                </mat-error>\\n                <mat-error *ngIf=\\\"form.get('amount').hasError('required')\\\">\\n                  Amount is <strong>required</strong>\\n                </mat-error>\\n              </mat-form-field>\\n              <button mat-button class=\\\"button2\\\" [disabled]=\\\"form.invalid\\\">Update</button>\\n            </form>\\n          </div>\\n        </div>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"couponColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let element; columns: couponColumns;\\\"\\n        class=\\\"example-element-row\\\"\\n        [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n        (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n    </tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n  </table>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatSnackBar, MatTableDataSource} from '@angular/material';\nimport {Coupon, CouponType} from '../../models/coupon';\nimport {CompanyService} from '../../shared/services/company.service';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {Company} from '../../models/company';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-get-coupons',\n  templateUrl: './get-company-coupons.component.html',\n  styleUrls: ['../../shared/layouts/company/company.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class GetCompanyCouponsComponent implements OnInit {\n\n  couponColumns: string[] = ['title', 'startDate', 'endDate', 'amount', 'couponType', 'message', 'price'];\n  couponSource: MatTableDataSource<Coupon>;\n  expandedElement: Company | null;\n\n  form: FormGroup;\n  matcher = new MyErrorStateMatcher();\n  showUpdate = false;\n\n  coupons: CouponType[] = [\n    {value: 'FOOD'},\n    {value: 'SPORTS'},\n    {value: 'HEALTH'},\n    {value: 'CAMPING'},\n    {value: 'TRAVELLING'},\n    {value: 'RESTAURANTS'},\n    {value: 'ELECTRICITY'}\n  ];\n\n  constructor(private company: CompanyService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.company.getAllCoupons().subscribe(coupons => this.couponSource = new MatTableDataSource(coupons),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n\n    this.form = new FormGroup({\n\n      endDate: new FormControl(null, [\n        Validators.required\n      ]),\n\n      price: new FormControl(null, [\n        Validators.min(1),\n        Validators.required\n      ]),\n\n      amount: new FormControl(null, [\n        Validators.min(1),\n        Validators.required\n      ])\n\n    });\n  }\n\n  couponFilter(filterValue: string) {\n    this.couponSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  onDelete(id: number) {\n    this.company.deleteCoupon(id).subscribe(\n      () => this.snackBar.open('Coupon successfully removed.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onUpdate(id: number) {\n    const coupon: Coupon = {\n      id: id,\n      endDate: new DatePipe('en-US').transform(this.form.value.endDate, 'yyyy-MM-dd'),\n      amount: this.form.value.amount,\n      price: this.form.value.price\n    };\n    this.company.updateCoupon(coupon).subscribe(\n      () => this.snackBar.open('Coupon successfully updated.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  onShowUpdate() {\n    this.showUpdate === false ? this.showUpdate = true : this.showUpdate = false;\n  }\n\n}\n","module.exports = \"<h3>My Coupons</h3>\\n\\n<form class=\\\"div2 animated bounceInRight\\\">\\n  <mat-form-field>\\n    <input matInput (keyup)=\\\"couponFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n\\n  <table mat-table [dataSource]=\\\"couponSource\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!-- Title column -->\\n    <ng-container matColumnDef=\\\"title\\\">\\n      <th mat-header-cell *matHeaderCellDef>Title</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.title}} </td>\\n    </ng-container>\\n\\n    <!-- Start date column -->\\n    <ng-container matColumnDef=\\\"startDate\\\">\\n      <th mat-header-cell *matHeaderCellDef>Creation Date</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.startDate}} </td>\\n    </ng-container>\\n\\n    <!-- End date column -->\\n    <ng-container matColumnDef=\\\"endDate\\\">\\n      <th mat-header-cell *matHeaderCellDef>Experation Date</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.endDate}} </td>\\n    </ng-container>\\n\\n    <!-- Amount column -->\\n    <ng-container matColumnDef=\\\"amount\\\">\\n      <th mat-header-cell *matHeaderCellDef>Amount</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.amount}} </td>\\n    </ng-container>\\n\\n    <!-- Type column -->\\n    <ng-container matColumnDef=\\\"couponType\\\">\\n      <th mat-header-cell *matHeaderCellDef>Coupon Type</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.couponType}} </td>\\n    </ng-container>\\n\\n    <!-- Message column -->\\n    <ng-container matColumnDef=\\\"message\\\">\\n      <th mat-header-cell *matHeaderCellDef>Message</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.message}} </td>\\n    </ng-container>\\n\\n    <!-- Price column -->\\n    <ng-container matColumnDef=\\\"price\\\">\\n      <th mat-header-cell *matHeaderCellDef>Price</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price}} </td>\\n    </ng-container>\\n\\n    <!-- Image column -->\\n    <ng-container matColumnDef=\\\"image\\\">\\n      <th mat-header-cell *matHeaderCellDef>Image</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.image}} </td>\\n    </ng-container>\\n\\n\\n\\n\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"couponColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: couponColumns;\\\"></tr>\\n  </table>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatSnackBar, MatTableDataSource} from '@angular/material';\nimport {Coupon} from '../../models/coupon';\nimport {CustomerService} from '../../shared/services/customer.service';\n\n@Component({\n  selector: 'app-get-coupons',\n  templateUrl: './get-customer-coupons.component.html',\n  styleUrls: ['../../shared/layouts/customer/customer.component.css']\n})\nexport class GetCustomerCouponsComponent implements OnInit {\n\n  couponColumns: string[] = ['title', 'startDate', 'endDate', 'amount', 'couponType', 'message', 'price', 'image'];\n  couponSource: MatTableDataSource<Coupon>;\n\n  constructor(private customer: CustomerService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.customer.getPurchasedCoupons().subscribe(coupons => this.couponSource = new MatTableDataSource(coupons),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  couponFilter(filterValue: string) {\n    this.couponSource.filter = filterValue.trim().toLowerCase();\n  }\n\n}\n","module.exports = \"<h3>Available Coupons Table</h3>\\n\\n<form class=\\\"div2 animated bounceInRight\\\">\\n  <mat-form-field>\\n    <input matInput (keyup)=\\\"couponFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n  </mat-form-field>\\n\\n  <table mat-table [dataSource]=\\\"couponSource\\\" multiTemplateDataRows class=\\\"mat-elevation-z8\\\">\\n\\n    <ng-container matColumnDef=\\\"title\\\">\\n      <th mat-header-cell *matHeaderCellDef>Title</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.title}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"startDate\\\">\\n      <th mat-header-cell *matHeaderCellDef>Creation Date</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">{{element.startDate}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"endDate\\\">\\n      <th mat-header-cell *matHeaderCellDef>Experation Date</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.endDate}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"amount\\\">\\n      <th mat-header-cell *matHeaderCellDef>Amount</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.amount}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"couponType\\\">\\n      <th mat-header-cell *matHeaderCellDef>Coupon Type</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.couponType}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"message\\\">\\n      <th mat-header-cell *matHeaderCellDef>Message</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.message}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"price\\\">\\n      <th mat-header-cell *matHeaderCellDef>Price</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"companyId\\\">\\n      <th mat-header-cell *matHeaderCellDef>Company ID</th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.companyId}} </td>\\n    </ng-container>\\n\\n\\n\\n    <ng-container matColumnDef=\\\"expandedDetail\\\">\\n      <td mat-cell *matCellDef=\\\"let element\\\" [attr.colspan]=\\\"couponColumns.length\\\">\\n        <div class=\\\"example-element-detail\\\"\\n             [@detailExpand]=\\\"element == expandedElement ? 'expanded' : 'collapsed'\\\">\\n          <div class=\\\"example-element-description\\\">\\n            <button mat-stroked-button class=\\\"button3\\\"\\n                    (click)=\\\"onPurchase(element.id)\\\"\\n            >Purchase\\n            </button>\\n          </div>\\n        </div>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"couponColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let element; columns: couponColumns;\\\"\\n        class=\\\"example-element-row\\\"\\n        [class.example-expanded-row]=\\\"expandedElement === element\\\"\\n        (click)=\\\"expandedElement = expandedElement === element ? null : element\\\">\\n    </tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']\\\" class=\\\"example-detail-row\\\"></tr>\\n  </table>\\n</form>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MatSnackBar, MatTableDataSource} from '@angular/material';\nimport {Coupon} from '../../models/coupon';\nimport {CustomerService} from '../../shared/services/customer.service';\nimport {MyErrorStateMatcher} from '../../models/errorStateMatcher';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {Company} from '../../models/company';\n\n@Component({\n  selector: 'app-purchase-coupon',\n  templateUrl: './purchase-coupon.component.html',\n  styleUrls: ['../../../app/shared/layouts/customer/customer.component.css'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0', display: 'none'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ]\n})\nexport class PurchaseCouponComponent implements OnInit {\n\n  couponColumns: string[] = ['title', 'startDate', 'endDate', 'amount', 'couponType', 'message', 'price'];\n  couponSource: MatTableDataSource<Coupon>;\n  expandedElement: Company | null;\n\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private customer: CustomerService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.customer.getAvailableCoupons().subscribe(coupons => this.couponSource = new MatTableDataSource(coupons),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n  couponFilter(filterValue: string) {\n    this.couponSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  onPurchase(id: number) {\n    this.customer.purchaseCoupon(id).subscribe(\n      () => this.snackBar.open('Coupon successfully purchased.', '', {duration: 3000}),\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n      });\n  }\n\n}\n","module.exports = \"<form class=\\\"div1 animated fadeIn slow\\\"\\n      (ngSubmit)=\\\"onSubmit()\\\"\\n>\\n<link href='https://fonts.googleapis.com/css?family=Notable' rel='stylesheet'>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Username\\\"\\n           [formControl]=\\\"form.get('name')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('name').hasError('minlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid username (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('maxlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid username (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('required')\\\">\\n      Username is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"password\\\"\\n           placeholder=\\\"Password\\\"\\n           [formControl]=\\\"form.get('password')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"\\n    >\\n    <mat-error *ngIf=\\\"form.get('password').hasError('minlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('maxlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('required')\\\">\\n      Password is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field>\\n    <mat-select\\n      placeholder=\\\"Client type\\\"\\n      [formControl]=\\\"form.get('clientType')\\\"\\n    >\\n      <mat-option *ngFor=\\\"let client of clients\\\" [value]=\\\"client.value\\\">\\n        {{client.value}}\\n      </mat-option>\\n    </mat-select>\\n    <mat-error *ngIf=\\\"form.get('clientType').hasError('required')\\\">\\n      Client type is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <button mat-button [disabled]=\\\"form.invalid || form.disabled\\\">Log in</button>\\n  <button mat-button routerLink=\\\"/registration\\\">Sign In</button>\\n</form>\\n\\n\"","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthorisationService} from '../shared/services/authorisation.service';\nimport {ClientType} from '../models/user';\nimport {Subscription} from 'rxjs';\nimport {Router} from '@angular/router';\nimport {MyErrorStateMatcher} from '../models/errorStateMatcher';\nimport {MatSnackBar} from '@angular/material';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['../shared/layouts/authorisation/authorisation.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  private sub: Subscription;\n\n  form: FormGroup;\n\n  matcher = new MyErrorStateMatcher();\n\n  clients: ClientType[] = [\n    {value: 'ADMIN'},\n    {value: 'COMPANY'},\n    {value: 'CUSTOMER'}\n  ];\n\n  constructor(private auth: AuthorisationService,\n              private router: Router,\n              private snackBar: MatSnackBar\n  ) {\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      clientType: new FormControl(null, [\n        Validators.required\n      ])\n\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  onSubmit() {\n    this.form.disable();\n    this.sub = this.auth.login(this.form.value).subscribe(\n      () => {\n        if (this.form.value.clientType === 'ADMIN') {\n          this.router.navigate(['/admin']);\n        } else if (this.form.value.clientType === 'COMPANY') {\n          this.router.navigate(['/company']);\n        } else if (this.form.value.clientType === 'CUSTOMER') {\n          this.router.navigate(['/customer']);\n        }\n      },\n      error => {\n        this.snackBar.open(error, '', {duration: 3000});\n        this.form.enable();\n      }\n    );\n  }\n}\n","import {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","module.exports = \"<form class=\\\"div1 animated fadeIn slow\\\"\\n      (ngSubmit)=\\\"onSubmit()\\\"\\n>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Email\\\"\\n           [formControl]=\\\"form.get('email')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error *ngIf=\\\"form.get('email').hasError('email') && !form.get('email').hasError('required')\\\">\\n      Please enter a valid email address\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('email').hasError('maxlength') && !form.get('email').hasError('required')\\\">\\n      Please enter a valid email (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('email').hasError('required')\\\">\\n      Email is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           placeholder=\\\"Username\\\"\\n           [formControl]=\\\"form.get('name')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error *ngIf=\\\"form.get('name').hasError('minlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid username (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('maxlength') && !form.get('name').hasError('required')\\\">\\n      Please enter a valid username (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('name').hasError('required')\\\">\\n      Username is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput\\n           type=\\\"password\\\"\\n           placeholder=\\\"Password\\\"\\n           [formControl]=\\\"form.get('password')\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error *ngIf=\\\"form.get('password').hasError('minlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Minimum length: 4)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('maxlength') && !form.get('password').hasError('required')\\\">\\n      Please enter a valid password (Maximum length: 20)\\n    </mat-error>\\n    <mat-error *ngIf=\\\"form.get('password').hasError('required')\\\">\\n      Password is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <mat-form-field>\\n    <mat-select\\n      placeholder=\\\"Client type\\\"\\n      [formControl]=\\\"form.get('clientType')\\\"\\n    >\\n      <mat-option *ngFor=\\\"let client of clients\\\" [value]=\\\"client.value\\\">\\n        {{client.value}}\\n      </mat-option>\\n    </mat-select>\\n    <mat-error *ngIf=\\\"form.get('clientType').hasError('required')\\\">\\n      Client type is <strong>required</strong>\\n    </mat-error>\\n  </mat-form-field>\\n  <br>\\n  <button mat-button routerLink=\\\"/login\\\">Sing in</button>\\n  <button mat-button [disabled]=\\\"form.invalid || form.disabled\\\">Sing up</button>\\n</form>\\n\\n\"","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {ClientType, User} from '../models/user';\nimport {Subscription} from 'rxjs';\nimport {AuthorisationService} from '../shared/services/authorisation.service';\nimport {MyErrorStateMatcher} from '../models/errorStateMatcher';\nimport {MatSnackBar} from '@angular/material';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['../shared/layouts/authorisation/authorisation.component.css']\n})\nexport class RegistrationComponent implements OnInit, OnDestroy {\n\n  private sub: Subscription;\n\n  form: FormGroup;\n\n  matcher = new MyErrorStateMatcher();\n\n  clients: ClientType[] = [\n    {value: 'COMPANY'},\n    {value: 'CUSTOMER'}\n  ];\n\n  constructor(private auth: AuthorisationService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.email,\n        Validators.maxLength(20)\n      ]),\n\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(4),\n        Validators.maxLength(20)\n      ]),\n\n      clientType: new FormControl(null, [\n        Validators.required\n      ])\n\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  onSubmit() {\n    this.form.disable();\n\n    const regUser: User = {\n      name: this.form.value.name,\n      password: this.form.value.password,\n      email: this.form.value.email\n    };\n\n    if (this.form.value.clientType === 'COMPANY') {\n      this.sub = this.auth.regCompany(regUser).subscribe(\n        () => this.snackBar.open('Successful registration.', '', {duration: 3000}),\n        error => {\n          this.snackBar.open(error, '', {duration: 3000});\n          this.form.enable();\n        }\n      );\n    } else if (this.form.value.clientType === 'CUSTOMER') {\n      this.sub = this.auth.regCustomer(regUser).subscribe(\n        () => this.snackBar.open('Successful registration.', '', {duration: 3000}),\n        error => {\n          this.snackBar.open(error, '', {duration: 3000});\n          this.form.enable();\n        }\n      );\n    }\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {AuthorisationService} from '../services/authorisation.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminAuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(private auth: AuthorisationService,\n              private router: Router) {\n  }\n  // makes sure we cant just use api address to enter the next page ..we must log in first\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    if (this.auth.isAdminLoggedIn()) {\n      return of(true);\n    } else {\n      this.router.navigate(['/login']);\n      return of(false);\n    }\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.canActivate(childRoute, state);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {AuthorisationService} from '../services/authorisation.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompanyAuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(private auth: AuthorisationService,\n              private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    if (this.auth.isCompanyLoggedIn()) {\n      return of(true);\n    } else {\n      this.router.navigate(['/login']);\n      return of(false);\n    }\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.canActivate(childRoute, state);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {AuthorisationService} from '../services/authorisation.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerAuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(private auth: AuthorisationService,\n              private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    if (this.auth.isCustomerLoggedIn()) {\n      return of(true);\n    } else {\n      this.router.navigate(['/login']);\n      return of(false);\n    }\n  }\n\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.canActivate(childRoute, state);\n  }\n\n}\n","module.exports = \".spacer {\\n  flex: 1 1 auto;\\n}\\n\\n\\n.mat-menu-item {\\n  color: #45047a;\\n  text-align: center;\\n}\\n\\n\\n/*Sign Out*/\\n\\n\\n.sure {\\n  font-family: notable;\\n  font-size: small;\\n  text-align: center;\\n  color: #6a0883;\\n  margin-top: 5px;\\n  margin-bottom: 15px;\\n  margin-left: 15px;\\n}\\n\\n\\n/* Main Page*/\\n\\n\\n.container {\\n  background-color: rgba(53, 52, 52, 0.966);\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n\\n\\nmat-sidenav {\\n  \\n  width: 250px;;\\n}\\n\\n\\n.no-shadow {\\n  background-color: #45047a;\\n  box-shadow: none !important;\\n}\\n\\n\\n::ng-deep .mat-expansion-panel-body {\\n  padding: 0 !important;\\n  padding-left: 10px !important;\\n}\\n\\n\\n/*Tool-Bar*/\\n\\n\\n.header-box-shadow {\\n  background-color: #45047a;\\n  box-shadow: 0 3px 5px -1px rgba(0,0,0,.2), 0 6px 10px 0 rgba(0,0,0,.14), 0 1px 18px 0 rgba(0,0,0,.12);\\n}\\n\\n\\n/*Nav-Bar*/\\n\\n\\n.bottom-to-top {\\n  background-color: #45047a;\\n  border: 0 solid;\\n  border-right-width: 1px;\\n  -o-border-image:\\n  linear-gradient(to top, #c1c1c1, rgba(0, 0, 0, 0)) 1 100%;\\n     border-image:\\n  linear-gradient(to top, #c1c1c1, rgba(0, 0, 0, 0)) 1 100%\\n}\\n\\n\\n.mat-form-field {\\n  \\n  font-size: 14px;\\n  width: 100%;\\n}\\n\\n\\n/*Nav-Bar -- add+show buttons*/\\n\\n\\n.button1 {\\n  color: ghostwhite;\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 14px;\\n  width: 230px;\\n}\\n\\n\\n/*Nav-Bar --add button (create) */\\n\\n\\n.button2 {\\n  color: ghostwhite;\\n  width: 100%;\\n}\\n\\n\\n/*Nav-Bar --update+remove(show button)*/\\n\\n\\n.button3 {\\n  color: #43076b;\\n  width: 1000px;\\n}\\n\\n\\n/*Nav-Bar --Income button*/\\n\\n\\n.button4 {\\n  color: ghostwhite;\\n  font-family: notable;\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 14px;\\n  width: 230px;\\n  margin-left: 9px;\\n}\\n\\n\\n/*WELCOME fade-in header*/\\n\\n\\nh1 {\\n  text-align: center;\\n  font-family: notable;\\n  font-size: 130px;\\n  color: #410572;\\n  text-shadow: 1px 3px 0 #5c00a7, 1px 13px 5px #c752d6;\\n}\\n\\n\\n/*DATE fade-in header*/\\n\\n\\nh2 {\\n  text-align: center;\\n  font-family: notable;\\n  font-size: 65px;\\n  color: #410572;\\n  text-shadow: 1px 3px 0 #5c00a7, 1px 10px 5px #c752d6;\\n}\\n\\n\\n/*Header -- Company,Coupon,Customer,Income Tables*/\\n\\n\\nh3 {\\n  text-align: center;\\n  font-family: notable;\\n  font-size: 40px;\\n  color: #410572;\\n  text-shadow: 1px 2px 1px #5c00a7, 1px 2px 1px #c752d6;\\n}\\n\\n\\n/*Table --header*/\\n\\n\\nth {\\n  background-color: #45047a;\\n  font-size: 15px;\\n  font-weight: bold;\\n    color: ghostwhite;\\n}\\n\\n\\ntable {\\n  width: 100%;\\n}\\n\\n\\ntr.example-detail-row {\\n  height: 0;\\n}\\n\\n\\n/*Table Hover -color*/\\n\\n\\ntr.example-element-row:not(.example-expanded-row):hover {\\n  background: #2f5fb9;\\n}\\n\\n\\ntr.example-element-row:not(.example-expanded-row):active {\\n  background: #610479;\\n}\\n\\n\\n.example-element-row td {\\n  border-bottom-width: 0;\\n}\\n\\n\\n.example-element-detail {\\n  overflow: hidden;\\n  display: flex;\\n}\\n\\n\\n.example-element-diagram {\\n  min-width: 80px;\\n  border: 2px solid rgb(17, 179, 17);\\n  padding: 8px;\\n  font-weight: lighter;\\n  margin: 8px 0;\\n  height: 104px;\\n}\\n\\n\\n.example-element-symbol {\\n  font-weight: bold;\\n  font-size: 40px;\\n  line-height: normal;\\n}\\n\\n\\n.example-element-description {\\n  padding: 16px;\\n}\\n\\n\\n.example-element-description-attribution {\\n  opacity: 0.5;\\n}\\n\"","module.exports = \"<!-- sidenav container = nav-bar-->\\n<mat-sidenav-container class=\\\"container\\\">\\n  <mat-sidenav #sidenav [(mode)]=\\\"over\\\" [(opened)]=\\\"opened\\\" class=\\\"bottom-to-top\\\">\\n    <div class=\\\"my-2\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"10px\\\"></div>\\n    <div class=\\\"mt-2 py-3 text-white\\\" fxLayout=\\\"column\\\"\\n         fxLayoutAlign=\\\"center center\\\"\\n         fxLayoutGap=\\\"7px\\\">\\n      <div>\\n        <a>\\n          <link href='https://fonts.googleapis.com/css?family=Notable' rel='stylesheet'>\\n          <span class=\\\"lead\\\">Administrator</span>\\n        </a>\\n      </div>\\n    </div>\\n    <hr width=\\\"90%\\\">\\n    <div>\\n      <mat-accordion multi=\\\"true\\\" [displayMode]=\\\"displayMode\\\">\\n        <mat-expansion-panel class=\\\"no-shadow my-0\\\">\\n          <mat-expansion-panel-header fxLayout=\\\"row\\\" [expandedHeight]=\\\"expandHeight\\\" [collapsedHeight]=\\\"collapseHeight\\\">\\n            <mat-panel-title class=\\\"text-white\\\">\\n              Companies\\n            </mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <mat-nav-list class=\\\"ml-0\\\" dense>\\n            <mat-nav-list class=\\\"ml-0\\\" dense>\\n              <button mat-button class=\\\"button1\\\" routerLink=\\\"/admin/create-company\\\">Add Companies</button>\\n              <button mat-button class=\\\"button1\\\" routerLink=\\\"/admin/get-companies\\\">List of Companies</button>\\n              <hr width=\\\"90%\\\">\\n            </mat-nav-list>\\n          </mat-nav-list>\\n        </mat-expansion-panel>       <!--no shadow-->\\n        <mat-expansion-panel class=\\\"no-shadow my-0\\\">\\n          <mat-expansion-panel-header fxLayout=\\\"row\\\" [expandedHeight]=\\\"expandHeight\\\" [collapsedHeight]=\\\"collapseHeight\\\">\\n            <mat-panel-title class=\\\"text-white\\\">\\n              Customers\\n            </mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <mat-nav-list class=\\\"ml-0\\\" dense>\\n            <button mat-button class=\\\"button1\\\" routerLink=\\\"/admin/create-customer\\\">Add</button>\\n            <button mat-button class=\\\"button1\\\" routerLink=\\\"/admin/get-customers\\\">Show</button>\\n            <hr width=\\\"90%\\\">\\n          </mat-nav-list>\\n        </mat-expansion-panel>\\n        <mat-expansion-panel class=\\\"no-shadow my-0\\\">\\n          <mat-expansion-panel-header fxLayout=\\\"row\\\" [expandedHeight]=\\\"expandHeight\\\" [collapsedHeight]=\\\"collapseHeight\\\">\\n            <mat-panel-title class=\\\"text-white\\\">\\n              Coupons\\n            </mat-panel-title>\\n          </mat-expansion-panel-header>\\n          <mat-nav-list class=\\\"ml-0\\\" dense>\\n            <button mat-button class=\\\"button1\\\" routerLink=\\\"/admin/create-coupon\\\">Add</button>\\n            <button mat-button class=\\\"button1\\\" routerLink=\\\"/admin/get-coupons\\\">Show</button>\\n            <hr width=\\\"90%\\\">\\n          </mat-nav-list>\\n        </mat-expansion-panel>\\n        <button mat-button class=\\\"button4\\\" routerLink=\\\"/admin/get-incomes\\\">Incomes</button>\\n        <button mat-button [matMenuTriggerFor]=\\\"menu\\\" fxShow.lt-md=\\\"false\\\" fxShow.gt-sm=\\\"true\\\">\\n          <mat-icon class=\\\"ml-2-1\\\">exit_to_app</mat-icon>\\n          <span class=\\\"ml-2\\\">Sign out</span>\\n        </button>\\n        <button mat-icon-button class=\\\"button5\\\" [matMenuTriggerFor]=\\\"menu\\\" fxShow.sm=\\\"true\\\" fxShow.gt-sm=\\\"false\\\">\\n          <mat-menu #menu=\\\"matMenu\\\" overlapTrigger=\\\"false\\\">\\n            <span class=\\\"sure\\\">Are You Sure?</span>\\n            <button mat-menu-item>\\n              <span>No</span>\\n            </button>\\n            <button mat-menu-item (click)=\\\"auth.logout()\\\">\\n              <span>Yes</span>\\n            </button>\\n  \\n          </mat-menu>\\n        </button>\\n      </mat-accordion>\\n    </div>\\n  </mat-sidenav>\\n<!----------------------------------------------------------------------------------------------------------------------------------------->\\n  <!--sidenav content -->\\n<mat-sidenav-content> \\n    <mat-toolbar class=\\\"header-box-shadow\\\">\\n      <button mat-icon-button (click)=\\\"sidenav.toggle()\\\" fxShow.sm=\\\"true\\\" fxShow.gt-sm=\\\"false\\\">\\n        <mat-icon>list</mat-icon>\\n      </button>\\n      <mat-icon class=\\\"mr-1\\\">home</mat-icon>\\n      <span class=\\\"logo\\\"> Ghost Coupon</span>\\n      <span class=\\\"spacer\\\"></span>\\n      <button mat-button [matMenuTriggerFor]=\\\"menu\\\" fxShow.lt-md=\\\"false\\\" fxShow.gt-sm=\\\"true\\\">\\n        <mat-icon>exit_to_app</mat-icon>\\n        <span class=\\\"ml-2\\\">Sign out</span>\\n      </button>\\n      <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" fxShow.lt-md=\\\"true\\\" fxShow.gt-sm=\\\"false\\\">\\n        <mat-menu #menu=\\\"matMenu\\\" overlapTrigger=\\\"false\\\">\\n          <span class=\\\"sure\\\">Are You Sure?</span>\\n          <button mat-menu-item>\\n            <span>No</span>\\n          </button>\\n          <button mat-menu-item (click)=\\\"auth.logout()\\\">\\n            <span>Yes</span>\\n          </button>\\n        </mat-menu>\\n      </button>\\n    </mat-toolbar>\\n\\n    <router-outlet></router-outlet>\\n    <div class=\\\"animated fadeOut slower\\\">\\n      <h1>Welcome</h1>\\n      <h2>{{date}}</h2>\\n    </div>\\n\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\"","import {Component} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MediaChange, ObservableMedia} from '@angular/flex-layout';\n// tslint:disable-next-line: quotemark\nimport {AuthorisationService} from \"../../services/authorisation.service\";\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent {\n\n  date = new DatePipe('en-US').transform(new Date(), 'EEEE, MMMM d, y');\n\n  opened = true;\n  over = 'side';\n  expandHeight = '42px';\n  collapseHeight = '42px';\n  displayMode = 'flat';\n\n  watcher: Subscription;\n\n  constructor(media: ObservableMedia, public auth: AuthorisationService) {\n    this.watcher = media.subscribe((change: MediaChange) => {\n      if (change.mqAlias === 'sm' || change.mqAlias === 'xs') {\n        this.opened = false;\n        this.over = 'over';\n      } else {\n        this.opened = true;\n        this.over = 'side';\n      }\n    });\n  }\n}\n\n\n\n","module.exports = \"h1 {\\n  font-family: notable;\\n  font-size:120px;\\n  background-color: #41035e;\\n  background-image: linear-gradient(\\n    -75deg,\\n    transparent 0,\\n    transparent 5%,\\n    rgba(255,255,255,0.5) 5%,\\n    rgba(255,255,255,0.5) 10%,\\n    transparent 10%,\\n    transparent 100%\\n  );\\n  background-size: 200% 100%;\\n  -webkit-text-fill-color: transparent;\\n  -webkit-background-clip: text;\\n  background-clip: 0;\\n  \\n  transition: 1.0s;\\n}\\nh1:hover{\\n  background-position: -120% 0;\\n}\\n.container {\\n  background-color: rgb(63, 61, 61);\\n  position: absolute;\\n  padding:0;\\n  margin:0;\\n  height: 100vh;\\n  width: 100vw;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  \\n}\\n.mat-button {\\n  color: ghostwhite;\\n  width: 20%;\\n}\\n\\n\\n\\n\"","module.exports = \"<mat-sidenav-container class=\\\"container\\\">\\n    <div class=\\\"animated fadeInDown fast\\\">\\n      <h1>Ghost Coupon</h1>\\n    </div>\\n  <router-outlet></router-outlet>\\n</mat-sidenav-container>\\n\\n\"","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-authorization',\n  templateUrl: './authorisation.component.html',\n  styleUrls: ['./authorisation.component.css']\n})\nexport class AuthorisationComponent {\n\n  constructor() {\n  }\n\n}\n","module.exports = \".spacer {\\n  flex: 1 1 auto;\\n}\\n.logo{\\n  color: ghostwhite;\\n  position: relative;\\n  font-family: notable;\\n}\\n.container {\\n  background-color: rgba(53, 52, 52, 0.966);\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n.mat-menu-item {\\n  color: #45047a;\\n  text-align: center;\\n}\\n.sure {\\n  font-family: Arial;\\n  font-size: small;\\n  text-align: center;\\n  color: #6a0883;\\n  margin-top: 5px;\\n  margin-bottom: 15px;\\n  margin-left: 15px;\\n}\\nmat-sidenav {\\n  width: 250px;;\\n}\\n.no-shadow {\\n  background-color: #45047a;\\n  box-shadow: none !important;\\n}\\n::ng-deep .mat-expansion-panel-body {\\n  padding: 0 !important;\\n  padding-left: 10px !important;\\n}\\n.header-box-shadow {\\n  background-color: #45047a;\\n  box-shadow: 0 3px 5px -1px rgba(0, 0, 0, .2), 0 6px 10px 0 rgba(0, 0, 0, .14), 0 1px 18px 0 rgba(0, 0, 0, .12);\\n}\\n.bottom-to-top {\\n  background-color: #45047a;\\n  border: 0 solid;\\n  border-right-width: 1px;\\n  -o-border-image: linear-gradient(to top, #c1c1c1, rgba(0, 0, 0, 0)) 1 100%;\\n     border-image: linear-gradient(to top, #c1c1c1, rgba(0, 0, 0, 0)) 1 100%\\n}\\ntable {\\n  width: 100%;\\n}\\n.mat-form-field {\\n  font-size: 14px;\\n  width: 100%;\\n}\\n.button1 {\\n  color: ghostwhite;\\n  font-family: notable;\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 14px;\\n  width: 230px;\\n}\\n.button2 {\\n  color: #3e50b5;\\n  width: 100%;\\n}\\n.button3 {\\n  color: #3e50b5;\\n  width: 1000px;\\n}\\nh1 {\\n  text-align: center;\\n  font-family: notable;\\n  font-size: 130px;\\n  color: #410572;\\n  text-shadow: 1px 3px 0 #5c00a7, 1px 13px 5px #c752d6;\\n}\\nh2 {\\n  text-align: center;\\n  font-family: notable;\\n  font-size: 65px;\\n  color: #410572;\\n  text-shadow: 1px 3px 0 #5c00a7, 1px 10px 5px #c752d6;\\n}\\nh3 {\\n  text-align: center;\\n  font-family: Arial;\\n  font-size: 40px;\\n  color: #410572;\\n  text-shadow: 1px 2px 1px #5c00a7, 1px 2px 1px #c752d6;\\n}\\nth {\\n  font-size: 15px;\\n  font-weight: bold;\\n  background-color: #690797;\\n  color:ghostwhite;\\n}\\ntable {\\n  width: 100%;\\n}\\ntr.example-detail-row {\\n  height: 0;\\n}\\ntr.example-element-row:not(.example-expanded-row):hover {\\n  background: #f5f5f5;\\n}\\ntr.example-element-row:not(.example-expanded-row):active {\\n  background: #efefef;\\n}\\n.example-element-row td {\\n  border-bottom-width: 0;\\n}\\n.example-element-detail {\\n  overflow: hidden;\\n  display: flex;\\n}\\n.example-element-diagram {\\n  min-width: 80px;\\n  border: 2px solid black;\\n  padding: 8px;\\n  font-weight: lighter;\\n  margin: 8px 0;\\n  height: 104px;\\n}\\n.example-element-symbol {\\n  font-weight: bold;\\n  font-size: 40px;\\n  line-height: normal;\\n}\\n.example-element-description {\\n  padding: 16px;\\n}\\n.example-element-description-attribution {\\n  opacity: 0.5;\\n}\\n\\n\"","module.exports = \"<mat-sidenav-container class=\\\"container\\\">\\n  <mat-sidenav #sidenav [(mode)]=\\\"over\\\" [(opened)]=\\\"opened\\\" class=\\\"bottom-to-top\\\">\\n    <div class=\\\"my-2\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"10px\\\"></div>\\n    <div class=\\\"mt-2 py-3 text-white\\\" fxLayout=\\\"column\\\"\\n         fxLayoutAlign=\\\"center center\\\"\\n         fxLayoutGap=\\\"7px\\\">\\n      <div>\\n        <a>\\n            <link href='https://fonts.googleapis.com/css?family=Notable' rel='stylesheet'>\\n          <span class=\\\"lead\\\">COMPANY</span>\\n        </a>\\n      </div>\\n    </div>\\n    <hr width=\\\"90%\\\">\\n    <div>\\n      <mat-nav-list>\\n        <button mat-button class=\\\"button1\\\" routerLink=\\\"/company/create-coupon\\\">Add Coupon</button>\\n        <button mat-button class=\\\"button1\\\" routerLink=\\\"/company/my-coupons\\\">My Coupons</button>\\n      </mat-nav-list>\\n    </div>\\n  </mat-sidenav>\\n\\n  <mat-sidenav-content>\\n    <mat-toolbar color=\\\"primary\\\" class=\\\"header-box-shadow\\\">\\n      <button mat-icon-button (click)=\\\"sidenav.toggle()\\\" fxShow.sm=\\\"true\\\" fxShow.gt-sm=\\\"false\\\">\\n        <mat-icon>menu</mat-icon>\\n      </button>\\n      <mat-icon class=\\\"mr-1\\\">home</mat-icon>\\n      <span class=\\\"logo\\\">Coupon System</span>\\n      <span class=\\\"spacer\\\"></span>\\n      <button mat-button [matMenuTriggerFor]=\\\"menu\\\" fxShow.lt-md=\\\"false\\\" fxShow.gt-sm=\\\"true\\\">\\n        <mat-icon>exit_to_app</mat-icon>\\n        <span class=\\\"ml-2\\\">Sign out</span>\\n      </button>\\n      <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" fxShow.lt-md=\\\"true\\\" fxShow.gt-sm=\\\"false\\\">\\n        <mat-menu #menu=\\\"matMenu\\\" overlapTrigger=\\\"false\\\">\\n          <span class=\\\"sure\\\">Are you sure?</span>\\n          <button mat-menu-item>\\n            <span>No</span>\\n          </button>\\n          <button mat-menu-item (click)=\\\"auth.logout()\\\">\\n            <span>Yes</span>\\n          </button>\\n        </mat-menu>\\n      </button>\\n    </mat-toolbar>\\n\\n    <router-outlet></router-outlet>\\n    <div class=\\\"animated fadeOut slower\\\">\\n      <h1>Welcome</h1>\\n      <h2>{{date}}</h2>\\n    </div>\\n\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\"","import {Component} from '@angular/core';\nimport {MediaChange, ObservableMedia} from '@angular/flex-layout';\nimport {Subscription} from 'rxjs';\nimport {AuthorisationService} from '../../services/authorisation.service';\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.css']\n})\nexport class CompanyComponent {\n\n  date = new DatePipe('en-US').transform(new Date(), 'EEEE, MMMM d, y');\n\n  opened = true;\n  over = 'side';\n  expandHeight = '42px';\n  collapseHeight = '42px';\n  displayMode = 'flat';\n\n  watcher: Subscription;\n\n  constructor(media: ObservableMedia, public auth: AuthorisationService) {\n    this.watcher = media.subscribe((change: MediaChange) => {\n      if (change.mqAlias === 'sm' || change.mqAlias === 'xs') {\n        this.opened = false;\n        this.over = 'over';\n      } else {\n        this.opened = true;\n        this.over = 'side';\n      }\n    });\n  }\n\n}\n\n","module.exports = \".spacer {\\n  flex: 1 1 auto;\\n}\\n\\n.container {\\n  background-color: rgba(53, 52, 52, 0.966);\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n\\n.mat-menu-item {\\n  color: #45047a;\\n  text-align: center;\\n}\\n\\n.sure {\\n  font-family: notable;\\n  font-size: small;\\n  text-align: center;\\n  color: #6a0883;\\n  margin-top: 5px;\\n  margin-bottom: 15px;\\n  margin-left: 15px;\\n}\\n\\nmat-sidenav {\\n  width: 250px;;\\n}\\n\\n.no-shadow {\\n  background-color: #45047a;\\n  box-shadow: none !important;\\n}\\n\\n::ng-deep .mat-expansion-panel-body {\\n  padding: 0 !important;\\n  padding-left: 10px !important;\\n}\\n\\n.header-box-shadow {\\n  background-color: #45047a;\\n  box-shadow: 0 3px 5px -1px rgba(0,0,0,.2), 0 6px 10px 0 rgba(0,0,0,.14), 0 1px 18px 0 rgba(0,0,0,.12);\\n}\\n\\n.bottom-to-top {\\n  background-color: #45047a;\\n  border: 0 solid;\\n  border-right-width: 1px;\\n  -o-border-image:\\n  linear-gradient(to top, #c1c1c1, rgba(0, 0, 0, 0)) 1 100%;\\n     border-image:\\n  linear-gradient(to top, #c1c1c1, rgba(0, 0, 0, 0)) 1 100%\\n}\\n\\ntable {\\n  width: 100%;\\n}\\n\\n.mat-form-field {\\n  font-size: 14px;\\n  width: 100%;\\n}\\n\\n.button1 {\\n  color: ghostwhite;\\n  text-align: left;\\n  font-weight: normal;\\n  font-size: 14px;\\n  width: 230px;\\n}\\n\\n.button2 {\\n  color: ghostwhite;\\n  width: 100%;\\n}\\n\\n.button3 {\\n  color: #43076b;\\n  width: 1000px;\\n}\\n\\nh1 {\\n    text-align: center;\\n    font-family: notable;\\n    font-size: 130px;\\n    color: #410572;\\n    text-shadow: 1px 3px 0 #5c00a7, 1px 13px 5px #c752d6;\\n}\\n\\nh2 {\\n  text-align: center;\\n  font-family: notable;\\n  font-size: 65px;\\n  color: #410572;\\n  text-shadow: 1px 3px 0 #5c00a7, 1px 10px 5px #c752d6;\\n}\\n\\nh3 {\\n  text-align: center;\\n  font-family: notable;\\n  font-size: 40px;\\n  color: #410572;\\n  text-shadow: 1px 2px 1px #5c00a7, 1px 2px 1px #c752d6;\\n}\\n\\nth {\\n  background-color: #45047a;\\n  font-size: 15px;\\n  font-weight: bold;\\n    color: ghostwhite;\\n}\\n\\ntable {\\n  width: 100%;\\n}\\n\\ntr.example-detail-row {\\n  height: 0;\\n}\\n\\ntr.example-element-row:not(.example-expanded-row):hover {\\n  background: #2f5fb9;\\n\\n}\\n\\ntr.example-element-row:not(.example-expanded-row):active {\\n  background: #610479;\\n}\\n\\n.example-element-row td {\\n  border-bottom-width: 0;\\n}\\n\\n.example-element-detail {\\n  overflow: hidden;\\n  display: flex;\\n}\\n\\n.example-element-diagram {\\n  min-width: 80px;\\n  border: 2px solid black;\\n  padding: 8px;\\n  font-weight: lighter;\\n  margin: 8px 0;\\n  height: 104px;\\n}\\n\\n.example-element-symbol {\\n  font-weight: bold;\\n  font-size: 40px;\\n  line-height: normal;\\n}\\n\\n.example-element-description {\\n  padding: 16px;\\n}\\n\\n.example-element-description-attribution {\\n  opacity: 0.5;\\n}\\n\"","module.exports = \"<mat-sidenav-container class=\\\"container\\\">\\n  <mat-sidenav #sidenav [(mode)]=\\\"over\\\" [(opened)]=\\\"opened\\\" class=\\\"bottom-to-top\\\">\\n    <div class=\\\"my-2\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" fxLayoutGap=\\\"10px\\\"></div>\\n    <div class=\\\"mt-2 py-3 text-white\\\" fxLayout=\\\"column\\\"\\n         fxLayoutAlign=\\\"center center\\\"\\n         fxLayoutGap=\\\"7px\\\">\\n      <div>\\n        <a>\\n            <link href='https://fonts.googleapis.com/css?family=Notable' rel='stylesheet'>\\n          <span class=\\\"lead\\\">CUSTOMER</span>\\n        </a>\\n      </div>\\n    </div>\\n    <hr width=\\\"90%\\\">\\n    <div>\\n      <mat-nav-list>\\n        <button mat-button class=\\\"button1\\\" routerLink=\\\"/customer/purchase-coupon\\\">Purchase Coupon</button>\\n        <button mat-button class=\\\"button1\\\" routerLink=\\\"/customer/my-coupons\\\">My Coupons</button>\\n      </mat-nav-list>\\n    </div>\\n  </mat-sidenav>\\n\\n  <mat-sidenav-content>\\n    <mat-toolbar color=\\\"primary\\\" class=\\\"header-box-shadow\\\">\\n      <button mat-icon-button (click)=\\\"sidenav.toggle()\\\" fxShow.sm=\\\"true\\\" fxShow.gt-sm=\\\"false\\\">\\n        <mat-icon>list</mat-icon>\\n      </button>\\n      <mat-icon class=\\\"mr-1\\\">home</mat-icon>\\n      <span class=\\\"logo\\\">Ghost Coupon</span>\\n      <span class=\\\"spacer\\\"></span>\\n      <button mat-button [matMenuTriggerFor]=\\\"menu\\\" fxShow.lt-md=\\\"false\\\" fxShow.gt-sm=\\\"true\\\">\\n        <mat-icon>exit_to_app</mat-icon>\\n        <span class=\\\"ml-2\\\">Sign out</span>\\n      </button>\\n      <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" fxShow.lt-md=\\\"true\\\" fxShow.gt-sm=\\\"false\\\">\\n        <mat-menu #menu=\\\"matMenu\\\" overlapTrigger=\\\"false\\\">\\n          <span class=\\\"sure\\\">Are you sure?</span>\\n          <button mat-menu-item>\\n            <span>No</span>\\n          </button>\\n          <button mat-menu-item (click)=\\\"auth.logout()\\\">\\n            <span>Yes</span>\\n          </button>\\n        </mat-menu>\\n      </button>\\n    </mat-toolbar>\\n\\n    <router-outlet></router-outlet>\\n    <div class=\\\"animated fadeOut slower\\\">\\n      <h1>Welcome</h1>\\n      <h2>{{date}}</h2>\\n    </div>\\n\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\\n\"","// tslint:disable-next-line: semicolon\nimport {Component} from '@angular/core'\n// tslint:disable-next-line: semicolon\nimport {Subscription} from 'rxjs'\n// tslint:disable-next-line: semicolon\nimport {MediaChange, ObservableMedia} from '@angular/flex-layout'\n// tslint:disable-next-line: semicolon\nimport {AuthorisationService} from '../../services/authorisation.service'\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent {\n\n  date = new DatePipe('en-US').transform(new Date(), 'EEEE, MMMM d, y');\n\n  opened = true;\n  over = 'side';\n\n  watcher: Subscription;\n\n  constructor(media: ObservableMedia, public auth: AuthorisationService) {\n    this.watcher = media.subscribe((change: MediaChange) => {\n      if (change.mqAlias === 'sm' || change.mqAlias === 'xs') {\n        this.opened = false;\n        this.over = 'over';\n      } else {\n        this.opened = true;\n        this.over = 'side';\n      }\n    });\n  }\n\n}\n","module.exports = \"\\n    <button mat-fab color=\\\"primary\\\" routerLink=\\\"/login\\\">Home</button>\\n    <img src=\\\"/src/assets/404ghost.gif\\\" alt=\\\"page 404\\\" class=\\\"center\\\">\\n    <router-outlet></router-outlet>\\n  \\n\"","import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-page404',\n  templateUrl: './page404.component.html',\n  styles: [`./page404.component.css\n`]\n})\nexport class Page404Component implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {ErrorService} from './error.service';\nimport {Company} from '../../models/company';\nimport {Customer} from '../../models/customer';\nimport {Coupon} from '../../models/coupon';\nimport {Income} from '../../models/income';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  private companyUrl = 'http://localhost:8080/admin/companies';\n  private couponUrl = 'http://localhost:8080/admin/coupons';\n  private customerUrl = 'http://localhost:8080/admin/customers';\n  private incomeUrl = 'http://localhost:8080/admin/incomes';\n\n  constructor(private http: HttpClient, private errorService: ErrorService) {\n  }\n\n  public createCompany(company: Company): Observable<Company> {\n    return this.http.post<Company>(this.companyUrl, company, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public deleteCompany(id: number): Observable<Company> {\n    return this.http.delete<Company>(this.companyUrl + '/' + id, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public updateCompany(company: Company): Observable<Company> {\n    return this.http.put<Company>(this.companyUrl, company, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public getAllCompanies(): Observable<Company[]> {\n    return this.http.get<Company[]>(this.companyUrl, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public createCoupon(coupon: Coupon): Observable<Coupon> {\n    return this.http.post<Coupon>(this.couponUrl + '/' + coupon.companyId, coupon, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public deleteCoupon(id: number): Observable<Coupon> {\n    return this.http.delete<Coupon>(this.couponUrl + '/' + id, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public updateCoupon(coupon: Coupon): Observable<Coupon> {\n    return this.http.put<Coupon>(this.couponUrl + '/' + coupon.companyId, coupon, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public getAllCoupons(): Observable<Coupon[]> {\n    return this.http.get<Coupon[]>(this.couponUrl, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public createCustomer(customer: Customer): Observable<Customer> {\n    return this.http.post<Customer>(this.customerUrl, customer, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public deleteCustomer(id: number): Observable<Customer> {\n    return this.http.delete<Customer>(this.customerUrl + '/' + id, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public updateCustomer(customer: Customer): Observable<Customer> {\n    return this.http.put<Customer>(this.customerUrl, customer, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public getAllCustomers(): Observable<Customer[]> {\n    return this.http.get<Customer[]>(this.customerUrl, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public getIncomes(): Observable<Income[]> {\n    return this.http.get<Income[]>(this.incomeUrl, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {User} from '../../models/user';\nimport {ErrorService} from './error.service';\nimport {catchError, tap} from 'rxjs/operators';\nimport {Router} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorisationService {\n  private logUrl = 'http://localhost:8080/login';\n  private regCompanyUrl = 'http://localhost:8080/registration/companies';\n  private regCustomerUrl = 'http://localhost:8080/registration/customers';\n\n  constructor(private http: HttpClient,\n              private errorService: ErrorService,\n              private router: Router) {\n  }\n\n  public login(logUser: User): Observable<User> {\n    return this.http.post<User>(this.logUrl, logUser, {withCredentials: true}).pipe(\n      tap(() => {\n        if (logUser.clientType === 'ADMIN') {\n          sessionStorage.setItem('adminLogged', logUser.clientType);\n        } else if (logUser.clientType === 'COMPANY') {\n          sessionStorage.setItem('companyLogged', logUser.clientType);\n        } else if (logUser.clientType === 'CUSTOMER') {\n          sessionStorage.setItem('customerLogged', logUser.clientType);\n        }\n      }),\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public regCompany(regUser: User): Observable<User> {\n    return this.http.post<User>(this.regCompanyUrl, regUser, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public regCustomer(regUser: User): Observable<User> {\n    return this.http.post<User>(this.regCustomerUrl, regUser, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public isAdminLoggedIn() {\n    if (sessionStorage.getItem('adminLogged') === 'ADMIN') {\n      return true;\n    }\n  }\n\n  public isCompanyLoggedIn() {\n    if (sessionStorage.getItem('companyLogged') === 'COMPANY') {\n      return true;\n    }\n  }\n\n  public isCustomerLoggedIn() {\n    if (sessionStorage.getItem('customerLogged') === 'CUSTOMER') {\n      return true;\n    }\n  }\n\n  public logout() {\n    sessionStorage.clear();\n    this.router.navigate(['/login']);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ErrorService} from './error.service';\nimport {Observable} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {Coupon} from '../../models/coupon';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompanyService {\n\n  private companyUrl = 'http://localhost:8080/company/coupons';\n\n  constructor(private http: HttpClient, private errorService: ErrorService) {\n  }\n\n  public createCoupon(coupon: Coupon): Observable<Coupon> {\n    return this.http.post<Coupon>(this.companyUrl, coupon, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public deleteCoupon(id: number): Observable<Coupon> {\n    return this.http.delete<Coupon>(this.companyUrl + '/' + id, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public updateCoupon(coupon: Coupon): Observable<Coupon> {\n    return this.http.put<Coupon>(this.companyUrl, coupon, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public getAllCoupons(): Observable<Coupon[]> {\n    return this.http.get<Coupon[]>(this.companyUrl, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ErrorService} from './error.service';\nimport {Observable} from 'rxjs';\nimport {catchError} from 'rxjs/operators';\nimport {Coupon} from '../../models/coupon';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n  private couponsUrl = 'http://localhost:8080/customer/coupons';\n  private availableUrl = 'http://localhost:8080/customer/coupons-available';\n\n  constructor(private http: HttpClient, private errorService: ErrorService) {\n  }\n\n  public purchaseCoupon(id: number): Observable<Coupon> {\n    return this.http.get<Coupon>(this.couponsUrl + '/' + id, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public getPurchasedCoupons(): Observable<Coupon[]> {\n    return this.http.get<Coupon[]>(this.couponsUrl, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n  public getAvailableCoupons(): Observable<Coupon[]> {\n    return this.http.get<Coupon[]>(this.availableUrl, {withCredentials: true}).pipe(\n      catchError(err => this.errorService.errorHandler(err)));\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {throwError} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorService {\n\n  public errorHandler(error: HttpErrorResponse) {\n    return throwError(error.error);\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {\n  MatButtonModule,\n  MatCheckboxModule,\n  MatDatepickerModule,\n  MatExpansionModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSnackBarModule,\n  MatTableModule\n} from '@angular/material';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {FlexLayoutModule} from '@angular/flex-layout';\n\n@NgModule({\n  imports: [\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatExpansionModule,\n    MatListModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTableModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    FlexLayoutModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [\n    MatButtonModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatSidenavModule,\n    FlexLayoutModule,\n    MatExpansionModule,\n    MatListModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTableModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    FlexLayoutModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule\n  ],\n})\nexport class SharedModule {\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import 'hammerjs';\nimport {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}